// <auto-generated>
// ReSharper disable All

using IF.ThreadPilot.Core.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Npgsql;
using NpgsqlTypes;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace IF.ThreadPilot.Core.Infrastructure.Entities.Persistence.Data
{
    public partial class ThreadPilotDbContext : DbContext, IThreadPilotDbContext
    {
        public ThreadPilotDbContext()
        {
            InitializePartial();
        }

        public ThreadPilotDbContext(DbContextOptions<ThreadPilotDbContext> options)
            : base(options)
        {
            InitializePartial();
        }

        public DbSet<Customer> Customers { get; set; } // customer
        public DbSet<FactCustomerInsurance> FactCustomerInsurances { get; set; } // fact_customer_insurance
        public DbSet<InsuranceType> InsuranceTypes { get; set; } // insuranceType
        public DbSet<VCustomerInsurance> VCustomerInsurances { get; set; } // v_customer_insurance
        public DbSet<Vehicle> Vehicles { get; set; } // vehicle

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseNpgsql(@"Server=localhost;Database=postgres;Port=5432;User Id=postgres;Password=threadpilotpwd");
                optionsBuilder.UseLazyLoadingProxies();
            }
        }

        public bool IsSqlParameterNull(NpgsqlParameter param)
        {
            var sqlValue = param.NpgsqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new CustomerConfiguration());
            modelBuilder.ApplyConfiguration(new FactCustomerInsuranceConfiguration());
            modelBuilder.ApplyConfiguration(new InsuranceTypeConfiguration());
            modelBuilder.ApplyConfiguration(new VCustomerInsuranceConfiguration());
            modelBuilder.ApplyConfiguration(new VehicleConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }


        partial void InitializePartial();
        partial void DisposePartial(bool disposing);
        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
        static partial void OnCreateModelPartial(ModelBuilder modelBuilder, string schema);
    }
}
// </auto-generated>
