// <auto-generated>
// ReSharper disable All

using IF.ThreadPilot.Core.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace IF.ThreadPilot.Core.Infrastructure.Entities.Persistence.Data
{
    // fact_customer_insurance
    public partial class FactCustomerInsuranceConfiguration : IEntityTypeConfiguration<FactCustomerInsurance>
    {
        public void Configure(EntityTypeBuilder<FactCustomerInsurance> builder)
        {
            builder.ToTable("fact_customer_insurance", "public");
            builder.HasKey(x => new { x.SsNo, x.InsuranceTypeId, x.Identity }).HasName("pk_fact_customer_insurance");

            builder.Property(x => x.SsNo).HasColumnName(@"SSNo").HasColumnType("character varying(13)").IsRequired().HasMaxLength(13).ValueGeneratedNever();
            builder.Property(x => x.InsuranceTypeId).HasColumnName(@"insuranceTypeId").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Identity).HasColumnName(@"identity").HasColumnType("character varying(50)").IsRequired().HasMaxLength(50).ValueGeneratedNever();

            // Foreign keys
            builder.HasOne(a => a.Customer).WithMany(b => b.FactCustomerInsurances).HasForeignKey(c => c.SsNo).HasConstraintName("fk_fact_customer_insurance_ssno");
            builder.HasOne(a => a.InsuranceType).WithMany(b => b.FactCustomerInsurances).HasForeignKey(c => c.InsuranceTypeId).HasConstraintName("fk_fact_customer_insurance_insuranceTypeId");

            InitializePartial(builder);
        }

        partial void InitializePartial(EntityTypeBuilder<FactCustomerInsurance> builder);
    }

}
// </auto-generated>
